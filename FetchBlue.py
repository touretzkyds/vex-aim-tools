from aim_fsm import *

class FetchBlue(StateMachineProgram):

    class CheckForBarrel(StateNode):
        def start(self, event=None):
            super().start(event)
            if 'BlueBarrel' in self.robot.world_map.objects:
                barrel = self.robot.world_map.objects['BlueBarrel']
                if barrel.is_visible:
                    self.parent.barrel_coords = (barrel.x, barrel.y)
                    self.post_success()
                    return
            self.post_failure()

    class TurnToBarrel(Turn):
        def __init__(self):
            super().__init__(0)
            
        def start(self, event):
            (x,y) = self.parent.barrel_coords
            self.angle_deg = atan2(y - self.robot.y, x - self.robot.x) * 180/pi
            print(f"TurnToBarrel angle_deg = {self.angle_deg} deg")
            super().start(event)

    class DriveToBarrel(Forward):
        def __init__(self):
            super().__init__(0)
            
        def start(self, event):
            robot_radius = 15
            (x,y) = self.parent.barrel_coords
            xd = x - self.robot.x
            yd = y - self.robot.y
            self.distance_mm = sqrt(xd*xd + yd*yd) - robot_radius
            super().start(event)

    def setup(self):
        #         look: self.CheckForBarrel()
        #         look =F=> look
        #         look =S=> {say_see, turn}
        # 
        #         say_see: PlaySoundFile("demo/see-barrel.mp3")
        #         turn: self.TurnToBarrel() =C=> drive: self.DriveToBarrel()
        #         {say_see, drive} =C(1)=> gotit
        # 
        # 	gotit: PlaySoundFile("demo/have-barrel.mp3") =C=> Turn(180) =C=> Forward(50) =C=> Kick() =C=> away
        # 
        # 	away: Turn(-180) =C=> look
        
        # Code generated by genfsm on Wed Sep 18 01:30:11 2024:
        
        look = self.CheckForBarrel() .set_name("look") .set_parent(self)
        say_see = PlaySoundFile("demo/see-barrel.mp3") .set_name("say_see") .set_parent(self)
        turn = self.TurnToBarrel() .set_name("turn") .set_parent(self)
        drive = self.DriveToBarrel() .set_name("drive") .set_parent(self)
        gotit = PlaySoundFile("demo/have-barrel.mp3") .set_name("gotit") .set_parent(self)
        turn1 = Turn(180) .set_name("turn1") .set_parent(self)
        forward1 = Forward(50) .set_name("forward1") .set_parent(self)
        kick1 = Kick() .set_name("kick1") .set_parent(self)
        away = Turn(-180) .set_name("away") .set_parent(self)
        
        failuretrans1 = FailureTrans() .set_name("failuretrans1")
        failuretrans1 .add_sources(look) .add_destinations(look)
        
        successtrans1 = SuccessTrans() .set_name("successtrans1")
        successtrans1 .add_sources(look) .add_destinations(say_see,turn)
        
        completiontrans1 = CompletionTrans() .set_name("completiontrans1")
        completiontrans1 .add_sources(turn) .add_destinations(drive)
        
        completiontrans2 = CompletionTrans(1) .set_name("completiontrans2")
        completiontrans2 .add_sources(say_see,drive) .add_destinations(gotit)
        
        completiontrans3 = CompletionTrans() .set_name("completiontrans3")
        completiontrans3 .add_sources(gotit) .add_destinations(turn1)
        
        completiontrans4 = CompletionTrans() .set_name("completiontrans4")
        completiontrans4 .add_sources(turn1) .add_destinations(forward1)
        
        completiontrans5 = CompletionTrans() .set_name("completiontrans5")
        completiontrans5 .add_sources(forward1) .add_destinations(kick1)
        
        completiontrans6 = CompletionTrans() .set_name("completiontrans6")
        completiontrans6 .add_sources(kick1) .add_destinations(away)
        
        completiontrans7 = CompletionTrans() .set_name("completiontrans7")
        completiontrans7 .add_sources(away) .add_destinations(look)
        
        return self
