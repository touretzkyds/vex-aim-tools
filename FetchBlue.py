from aim_fsm import *

class FetchBlue(StateMachineProgram):

    class CheckForBarrel(StateNode):
        def start(self, event=None):
            super().start(event)
            if 'BlueBarrel' in self.robot.world_map.objects:
                barrel = self.robot.world_map.objects['BlueBarrel']
                if barrel.is_visible:
                    self.parent.obj_coords = (barrel.x, barrel.y)
                    self.post_success()
                    return
            self.post_failure()

    class CheckForBall(StateNode):
        def start(self, event=None):
            super().start(event)
            if 'Ball' in self.robot.world_map.objects:
                ball = self.robot.world_map.objects['Ball']
                if ball.is_visible:
                    self.parent.obj_coords = (ball.x, ball.y)
                    self.post_success()
                    return
            self.post_failure()

    class TurnToObject(Turn):
        def __init__(self):
            super().__init__(0)
            
        def start(self, event):
            (x,y) = self.parent.obj_coords
            print(f"TurnToObject: obj at ({x},{y})  robot at ({robot.x},{robot.y}) @ {robot.theta*180/pi} deg.")
            angle = wrap_angle(atan2(y - self.robot.y, x - self.robot.x) - robot.theta)
            self.angle_deg = angle * 180/pi
            print(f"TurnToObject angle_deg = {self.angle_deg} deg")
            super().start(event)

    class DriveToObject(Forward):
        def __init__(self):
            super().__init__(0)
            
        def start(self, event):
            robot_radius = 15
            (x,y) = self.parent.obj_coords
            xd = x - self.robot.x
            yd = y - self.robot.y
            self.distance_mm = sqrt(xd*xd + yd*yd) - robot_radius
            super().start(event)

    def setup(self):
        #         look_barrel: self.CheckForBarrel()
        #         look_barrel =S=> {say_barrel, turn_barrel}
        #         look_barrel =F=> look_ball
        # 
        #         say_barrel: PlaySoundFile("demo/see-barrel.mp3")
        #         turn_barrel: self.TurnToObject() =C=> drive_barrel: self.DriveToObject()
        #         {say_barrel, drive_barrel} =C=> got_barrel
        # 
        # 	got_barrel: PlaySoundFile("demo/have-barrel.mp3") =C=> Turn(180) =C=> Forward(50) =C=> Kick() =C=> away
        # 
        #         look_ball: self.CheckForBall()
        #         look_ball =S=> {say_ball, turn_ball}
        #         look_ball =F=> StateNode() =T(1)=> look_barrel
        # 
        #         say_ball: PlaySoundFile("demo/get-ball.mp3")
        #         turn_ball: self.TurnToObject() =C=> drive_ball: self.DriveToObject()
        #         {say_ball, drive_ball} =C=> got_ball
        # 
        # 	got_ball: PlaySoundFile("demo/kicking-ball.mp3") =C=> Turn(180) =C=>
        #           Kick(vex.KickType.MEDIUM) =C=> away
        # 
        # 	away: Turn(-180) =C=> look_barrel
        
        # Code generated by genfsm on Wed Sep 18 14:09:29 2024:
        
        look_barrel = self.CheckForBarrel() .set_name("look_barrel") .set_parent(self)
        say_barrel = PlaySoundFile("demo/see-barrel.mp3") .set_name("say_barrel") .set_parent(self)
        turn_barrel = self.TurnToObject() .set_name("turn_barrel") .set_parent(self)
        drive_barrel = self.DriveToObject() .set_name("drive_barrel") .set_parent(self)
        got_barrel = PlaySoundFile("demo/have-barrel.mp3") .set_name("got_barrel") .set_parent(self)
        turn1 = Turn(180) .set_name("turn1") .set_parent(self)
        forward1 = Forward(50) .set_name("forward1") .set_parent(self)
        kick1 = Kick() .set_name("kick1") .set_parent(self)
        look_ball = self.CheckForBall() .set_name("look_ball") .set_parent(self)
        statenode1 = StateNode() .set_name("statenode1") .set_parent(self)
        say_ball = PlaySoundFile("demo/get-ball.mp3") .set_name("say_ball") .set_parent(self)
        turn_ball = self.TurnToObject() .set_name("turn_ball") .set_parent(self)
        drive_ball = self.DriveToObject() .set_name("drive_ball") .set_parent(self)
        got_ball = PlaySoundFile("demo/kicking-ball.mp3") .set_name("got_ball") .set_parent(self)
        turn2 = Turn(180) .set_name("turn2") .set_parent(self)
        kick2 = Kick(vex.KickType.MEDIUM) .set_name("kick2") .set_parent(self)
        away = Turn(-180) .set_name("away") .set_parent(self)
        
        successtrans1 = SuccessTrans() .set_name("successtrans1")
        successtrans1 .add_sources(look_barrel) .add_destinations(say_barrel,turn_barrel)
        
        failuretrans1 = FailureTrans() .set_name("failuretrans1")
        failuretrans1 .add_sources(look_barrel) .add_destinations(look_ball)
        
        completiontrans1 = CompletionTrans() .set_name("completiontrans1")
        completiontrans1 .add_sources(turn_barrel) .add_destinations(drive_barrel)
        
        completiontrans2 = CompletionTrans() .set_name("completiontrans2")
        completiontrans2 .add_sources(say_barrel,drive_barrel) .add_destinations(got_barrel)
        
        completiontrans3 = CompletionTrans() .set_name("completiontrans3")
        completiontrans3 .add_sources(got_barrel) .add_destinations(turn1)
        
        completiontrans4 = CompletionTrans() .set_name("completiontrans4")
        completiontrans4 .add_sources(turn1) .add_destinations(forward1)
        
        completiontrans5 = CompletionTrans() .set_name("completiontrans5")
        completiontrans5 .add_sources(forward1) .add_destinations(kick1)
        
        completiontrans6 = CompletionTrans() .set_name("completiontrans6")
        completiontrans6 .add_sources(kick1) .add_destinations(away)
        
        successtrans2 = SuccessTrans() .set_name("successtrans2")
        successtrans2 .add_sources(look_ball) .add_destinations(say_ball,turn_ball)
        
        failuretrans2 = FailureTrans() .set_name("failuretrans2")
        failuretrans2 .add_sources(look_ball) .add_destinations(statenode1)
        
        timertrans1 = TimerTrans(1) .set_name("timertrans1")
        timertrans1 .add_sources(statenode1) .add_destinations(look_barrel)
        
        completiontrans7 = CompletionTrans() .set_name("completiontrans7")
        completiontrans7 .add_sources(turn_ball) .add_destinations(drive_ball)
        
        completiontrans8 = CompletionTrans() .set_name("completiontrans8")
        completiontrans8 .add_sources(say_ball,drive_ball) .add_destinations(got_ball)
        
        completiontrans9 = CompletionTrans() .set_name("completiontrans9")
        completiontrans9 .add_sources(got_ball) .add_destinations(turn2)
        
        completiontrans10 = CompletionTrans() .set_name("completiontrans10")
        completiontrans10 .add_sources(turn2) .add_destinations(kick2)
        
        completiontrans11 = CompletionTrans() .set_name("completiontrans11")
        completiontrans11 .add_sources(kick2) .add_destinations(away)
        
        completiontrans12 = CompletionTrans() .set_name("completiontrans12")
        completiontrans12 .add_sources(away) .add_destinations(look_barrel)
        
        return self
